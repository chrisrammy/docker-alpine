#!/usr/bin/env bash

declare BUILD_MASTER="${BUILD_MASTER}"
declare BUILD_IMAGE="${BUILD_IMAGE:-alpine-builder}"
declare BUILD_PREFIX="${BUILD_PREFIX:-alpine-build-}"
declare VERSIONS="${VERSIONS:-versions/**/build}"

build() {
	declare build_files="${*:-$VERSIONS}"
	: "${build_files:?}"

	if [[ -z $(which docker) ]]; then
		echo "Missing docker client which is required for building"
		exit 2
	fi

	docker build -t "$BUILD_IMAGE" builder

	for file in $build_files; do
		source "$file"
		local release="$RELEASE"
		local build="${BUILD_PREFIX}${release}"
		local build_options="$BUILD_OPTIONS"
		local version_dir="$(dirname "$file")"
		local tags="$TAGS"
		local master="$(echo "${tags//://_}" | cut -d' ' -f1):master"

		: "${build:?}" "${tags:?}" "${build_options:?}" "${release:?}"

		docker rm "$build" 2>/dev/null || true

		docker run --name "$build" "$BUILD_IMAGE" $build_options
		docker cp "$build":/rootfs.tar.gz "./$version_dir/"

		if [[ "$BUILD_MASTER" ]]; then
			docker build -t "$master" "./$version_dir/"

			for tag in $tags; do
				docker tag -f "$master" "${tag}"
				if [[ "$CIRCLE_BUILD_NUM" ]]; then
					mkdir -p images \
					&& docker tag -f ":${tag}" "${tag}-${CIRCLE_BUILD_NUM}" \
					&& docker save "${tag}-${CIRCLE_BUILD_NUM}" \
						| gzip -c > "images/${tag//\//_}-${CIRCLE_BUILD_NUM}.tar.gz" \
					&& docker rmi "${tag}-${CIRCLE_BUILD_NUM}" || true
				fi
			done
			docker rmi "$master" || true
		fi

		docker rm "$build" || true
	done
}

commit() {
	declare rootfs_files="${*:-versions/**/rootfs.tar.gz}"
	local build_num="${CIRCLE_BUILD_NUM:-nobuild}"

	for file in $rootfs_files; do
		local release="$(basename "$(dirname "$file")")"
		local version_dir="$(dirname "$file")"
		local current_branch=$(git rev-parse --abbrev-ref HEAD)

		: "${release:?}"

		git checkout -B "rootfs-$release"
		git add -f -- "$file"
		git commit -m "pushing release $release for build $build_num"
		git push -f origin "rootfs-$release"
		git checkout "$current_branch"
	done
}

test() {
	declare build_files="${*:-$VERSIONS}"
	for file in $build_files; do
		source "$file"
		local tag="$(echo "$TAGS" | cut -d' ' -f1)"
		if docker inspect "${tag}" >/dev/null 2>&1; then
			docker run "${tag}" apk add --update openssl || exit 1
		fi
	done
}

main() {
	set -eo pipefail; [[ "$TRACE" ]] && set -x
	cmd="$1"
	case "$cmd" in
		test)		shift; test "$@";;
		commit)	shift; commit "$@";;
		*)			build "$@";;
	esac
}

main "$@"
